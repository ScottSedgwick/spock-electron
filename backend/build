#!/usr/bin/env stack
-- stack --resolver lts-10.4 script --package shake --package unix --package directory

import Control.Monad (mapM_, when)
import Development.Shake (ShakeOptions(..), (%>), cmd_, liftIO, need, phony, putNormal, shakeArgs, shakeOptions, want)
import System.Directory (doesFileExist, removeFile)
import System.Posix.Files (ownerModes, setFileMode)

-- Define a sandbox directory for build byproducts to go in
buildPath :: String
buildPath = "_build"

svrName :: String
svrName = "backend"

killrunFile :: String
killrunFile = buildPath ++ "/killrun"

killrunStr :: String
killrunStr = "# Autogenerated. Do not edit.\nkillall " ++ svrName ++ "\nstack exec " ++ svrName ++ " &"

options :: ShakeOptions
options = shakeOptions{shakeFiles=buildPath}

whenM :: Monad m => m Bool -> m() -> m()
whenM a b = a >>= \a' -> when a' b

main :: IO ()
main = shakeArgs options $ do
    want ["watch"]

    phony "build"     $ cmd_ "stack build -j 8 --fast --haddock-deps"

    phony "clean"     $ cmd_ "stack clean" 

    phony "deploy"    $ cmd_ "stack build -j 8 --fast --copy-bins"       

    phony "genhoogle" $ cmd_ "stack hoogle -- generate --local"

    phony "haddock"   $ cmd_ "stack haddock --open"

    phony "hoogle"    $ cmd_ "stack hoogle -- server --local --port=8081"

    phony "list" $ do
        mapM_ putNormal [ "Usage: ./build <target>"
                        , "Targets:"
                        , "  build        Compile the backen project"
                        , "  clean        Delete all build byproducts"
                        , "  deploy       Build and copy output to Electron project"
                        , "  genhoogle    Generate Hoogle documentation for project"
                        , "  haddock      Launch Haddock page for project dependencies"
                        , "  hoogle       Launch local Hoogle server"
                        , "  list         List these targets"
                        , "  watch        Build-Launch-Rebuild loop"
                        ]

    phony "setMode" $ do
        need [killrunFile]
        liftIO $ setFileMode killrunFile ownerModes

    phony "watch" $ do
        liftIO $ whenM (doesFileExist killrunFile) (removeFile killrunFile)
        need ["setMode"]
        cmd_ $ "stack build -j 8 --fast --haddock-deps --file-watch --exec ./" ++ killrunFile

    killrunFile %> \out -> liftIO $ writeFile out killrunStr
