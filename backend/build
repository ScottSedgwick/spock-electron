#!/usr/bin/env stack
-- stack --resolver lts-10.4 script --package shake --package unix --package directory

import Control.Monad (when)
import Development.Shake (ShakeOptions(..), (%>), cmd_, liftIO, need, phony, shakeArgs, shakeOptions, want)
import System.Directory (doesFileExist, removeFile)
import System.Posix.Files (ownerModes, setFileMode)

-- Define a sandbox directory for build byproducts to go in
buildPath :: String
buildPath = "_build"

svrName :: String
svrName = "backend"

killrunFile :: String
killrunFile = buildPath ++ "/killrun"

killrunStr :: String
killrunStr = "# Autogenerated. Do not edit.\nkillall " ++ svrName ++ "\nstack exec " ++ svrName ++ " &"

options :: ShakeOptions
options = shakeOptions{shakeFiles=buildPath}

whenM :: Monad m => m Bool -> m() -> m()
whenM a b = a >>= \a' -> when a' b

main :: IO ()
main = shakeArgs options $ do
    want ["watch"]

    phony "build" $ cmd_ "stack build -j 8 --fast"

    phony "clean" $ do
        cmd_ "stack clean"
        cmd_ "rm -rf ../frontend/resources/static"
        cmd_ "rm -f ../frontend/resources/backend"

    phony "static" $ do
        need ["clean"]
        cmd_ "cp -R static ../frontend/resources/static"

    phony "deploy" $ do
        need ["clean", "static"]
        cmd_ "stack build --copy-bins"
        

    phony "watch" $ do
        liftIO $ whenM (doesFileExist killrunFile) (removeFile killrunFile)
        need ["setMode"]
        cmd_ $ "stack build --file-watch --exec ./" ++ killrunFile

    phony "setMode" $ do
        need [killrunFile]
        liftIO $ setFileMode killrunFile ownerModes

    killrunFile %> \out -> liftIO $ writeFile out killrunStr
